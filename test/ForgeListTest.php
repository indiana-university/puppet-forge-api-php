<?php

namespace Edu\Iu\Uits\Webtech\ForgeApi\Test;

use Edu\Iu\Uits\Webtech\ForgeApi\ForgeList;
use Edu\Iu\Uits\Webtech\ForgeApi\Module;
use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Middleware;
use GuzzleHttp\Psr7\Response;
use PHPUnit\Framework\TestCase;

class ForgeListTest extends TestCase
{
    private $list;

    protected function setUp(): void
    {
        $historyContainer = [];
        $history = Middleware::history($historyContainer);

        $mock = new MockHandler([
            new Response(200, ['Content-Type' => 'application/json'], file_get_contents(__dir__ . '/data/module_list.json')),
        ]);
        $handlerStack = HandlerStack::create($mock);
        $handlerStack->push($history);
        $client = new Client(['handler' => $handlerStack]);

        $list = new ForgeList(
            file_get_contents(__dir__ . '/data/module_list.json'),
            $client
        );

        $this->list = $list;

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testGetResults()
    {
        $this->assertEquals(1, count($this->list->getResults()));
    }

    public function testPrevious()
    {
        $this->assertInstanceOf(ForgeList::class, $this->list->previous());
    }

    public function testFirst()
    {
        $this->assertInstanceOf(ForgeList::class, $this->list->first());
    }

    public function testGetLimit()
    {
        $this->assertEquals(20, $this->list->getLimit());
    }

    public function testGetOffset()
    {
        $this->assertEquals(0, $this->list->getOffset());
    }

    public function testGetTotal()
    {
        $this->assertEquals(100, $this->list->getTotal());
    }

    public function testNext()
    {
        $this->assertInstanceOf(ForgeList::class, $this->list->next());
    }
    
    public function testPrevAndNextSinglePage()
    {
        $client = new Client();

        $list = new ForgeList(
            file_get_contents(__dir__ . '/data/module_list_singlePage.json'),
            $client
        );

        $this->assertNull($list->previous());
        $this->assertNull($list->next());
    }
}
